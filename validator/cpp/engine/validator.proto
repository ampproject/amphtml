// For the ValidatorRules and the ValidatorResult protos,
// please see third_party/javascript/amp_validator/validator.proto.
syntax = "proto2";

package amp.validator;

import "../../validator.proto";

// Information about the validator returned by ValidatorFactory
// (see validator.h).
message ValidatorInfo {
  // Path from which the spec file was loaded.
  optional string rules_path = 1;
  // The file revision of validator.cc.
  optional int32 validator_revision = 2 [default = -1];
  // The file revision of the spec file (validator.protoascii).
  optional int32 spec_file_revision = 3 [default = -1];
}

// Construction parameter for Validator (see NewValidator in validator.h).
// Note that the Javascript implementation does not use this proto.
// The equivalent defaults for the Javascript would be max_errors = -1.
message ValidatorOptions {
  // -1 means we will record all errors.
  // It's OK to set this to 0, which means ValidationResult will only have
  // its status field set.
  optional int32 max_errors = 1 [default = 10];

  extensions 2;  // Previously used tag ids.
}

message ValidatorFactoryOptions {
  // Location of the validator rules file, which must be a
  // |ValidatorRules| message encoded as a single binary proto. If not
  // set, the factory will instantiate the embedded validator rules.
  // If empty, loads the embedded rules.
  optional string binary_rules_path = 1;
  // The HtmlFormat enum informs the validator which set of validation rules
  // to use on an incoming document. Documents can only be of one format, though
  // detection of the intended format can be made by inspecting the document's
  // <html> tag.
  optional amp.validator.HtmlFormat.Code html_format = 3 [default = AMP];
}
