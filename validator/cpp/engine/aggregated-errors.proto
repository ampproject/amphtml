// See http://g3doc/third_party/ampvalidator/g3doc/aggregated-errors.md

syntax = "proto2";

package amp.validator;

import "../../validator.proto";

message AggregatedError {
  optional ValidationError.Severity severity = 1;
  // NEXT AVAILABLE TAG: 10040
  enum Code {
    UNKNOWN_CODE = 0;
    DO_NOT_AGGREGATE = 10000;
    // Codes start at 10000 to reduce the risk of AggregatedError codes being
    // incorrectly read as ValidationError codes or vice versa.
    MALFORMED_AMP_BOILERPLATE = 10003;
    NON_WHITESPACE_CDATA_ENCOUNTERED = 10004;
    ANY_DISALLOWED_TAG = 10001;
    INVALID_URL_PROTOCOL_ANY_ATTRIBUTE = 10002;
    WRONG_PARENT_TAG = 10005;
    TAG_WITH_AMP_ALTERNATIVE = 10006;
    SCRIPT_DISALLOWED_IN_BODY = 10007;
    STYLE_DISALLOWED_IN_BODY = 10008;
    TAG_ALLOWED_ONLY_IN_HEAD = 10009;
    MANDATORY_TAG_MISSING = 10010;
    MISSING_REQUIRED_EXTENSION = 10011;
    WARNING_EXTENSION_DEPRECATED_VERSION = 10012;
    SCRIPT_RELEASE_VERSION_MISMATCH = 10039;
    DISALLOWED_ATTR_OR_VALUE = 10013;
    DISALLOWED_HTML_EVENT_ATTRIBUTE = 10014;
    DISALLOWED_EXTERNAL_STYLESHEET = 10015;
    MISSING_LAYOUT_ATTRIBUTES = 10037;
    INVALID_LAYOUT_ATTRIBUTES = 10016;
    MANDATORY_ATTR_MISSING = 10017;
    MANDATORY_ONEOF_ATTR_MISSING = 10018;
    MANDATORY_ANYOF_ATTR_MISSING = 10036;
    DUPLICATE_EXTENSION = 10019;
    STYLESHEET_TOO_LONG = 10020;
    CSS_SYNTAX_ERROR = 10021;
    EXTENSION_UNUSED = 10022;
    WARNING_EXTENSION_UNUSED = 10023;
    INCORRECT_NUM_CHILD_TAGS = 10024;
    DISALLOWED_CHILD_TAG = 10025;
    INVALID_PROPERTY_VALUE_IN_ATTR_VALUE = 10026;
    DISALLOWED_PROPERTY_IN_ATTR_VALUE = 10027;
    DISALLOWED_MUSTACHE_IN_ATTR_VALUE = 10028;
    DISALLOWED_MUSTACHE_IN_ATTR_NAME = 10029;
    DISALLOWED_RELATIVE_URL = 10030;
    DEPRECATED_OLD_BOILERPLATE = 10031;
    INVALID_URL = 10032;
    DUPLICATE_ATTRIBUTE = 10033;
    STYLESHEET_AND_INLINE_STYLE_TOO_LONG = 10034;
    INLINE_STYLE_TOO_LONG = 10035;
    DOCUMENT_SIZE_LIMIT_EXCEEDED = 10038;
  }
  optional Code code = 2;
  optional string documentation_url = 3;
  repeated string params = 4;
}

message AggregatedErrorCodeFormat {
  optional /* actually required */ AggregatedError.Code code = 1;
  // The error format may contain placeholders, ie:
  // "The tag "%1" contains attribute "%2". These placeholder values match up
  // to the same parameter indices as in the original ValidatorError.
  optional /* actually required */ string format = 2;
}

// Matches the value of a ValidationError.params substitution parameter.
message ParamMatchRule {
  // Index of the parameter to match against. This is the one-based index,
  // as printed in the format string of the error format.
  optional /* actually required */ int32 param_index = 1;
  // Value the parameter must match against. One of the following must be
  // present.
  optional string param_value = 2;
  optional string param_regex = 3;  // Uses RE2::FullMatch
}

message AggregationRule {
  optional /* actually required */ ValidationError.Code validator_code = 1;
  // If present, this aggregation rule triggers an Aggregated error with the
  // given AggregatedErrorCode. If no |aggregated_code| is present, then the
  // Rule results in this ValidationError not being aggregated (ie:
  // amp::validator::AggregatedError() will return false.
  optional AggregatedError.Code aggregated_code = 2;
  // If present, this aggregation rule only applies if all parameter
  // requirements match the input ValidationError.
  repeated ParamMatchRule param = 3;
  // Each parameter in the ValidationError.Code which matches one of these
  // repeated values is copied to the aggregation output. This allows us
  // to drop parameters which are unbounded, such as param 1 in the error
  // "The tag '%1' is disallowed'."
  // Field has no meaning if aggregated_code is set to DO_NOT_AGGREGATE, no
  // parameters should be copied in that instance.
  repeated int32 copy_param = 4;

  // If an AggregationRule matches, it may produce an documentation_url for the
  // AggregatedError. The documentation_url can either come from the original
  // ValidationError or from the AggregationRule itself. It can also be unset.
  oneof documentation_url_src {
    // If true, use the spec_url as the documentation URL. If this is true, then
    // the spec URL *must* vary in concert with an output parameter, so that
    // AggregatedErrors do not vary with respect to the documentation URL.
    bool copy_spec_url = 5 [default = false];
    // If set, this is the documentation URL for this specific aggregated error.
    string documentation_url = 6;
  }
}

message AggregatedErrorCodeMap {
  repeated AggregatedErrorCodeFormat aggregated_error_code_format = 1;
  repeated AggregationRule aggregation_rule = 2;
}
