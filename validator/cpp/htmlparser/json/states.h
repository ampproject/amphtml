// -*- C++ -*-
//
// Copyright 2020 The AMP HTML Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the license.
//

// AUTO GENERATED; DO NOT EDIT.
// To regenerate this file, see comments in bin/jsongrammargen

#ifndef HTMLPARSER__JSON_STATES_H_
#define HTMLPARSER__JSON_STATES_H_

#include <array>

namespace htmlparser::json {

enum class StateCode {
  $ = 0,
  ARRAY_END = 1,
  ARRAY_FIRST_ITEM = 2,
  ARRAY_NEXT_ITEM = 3,
  ARRAY_SEPARATOR = 4,
  FALSE_1 = 5,
  FALSE_2 = 6,
  FALSE_3 = 7,
  FALSE_4 = 8,
  NULL_1 = 9,
  NULL_2 = 10,
  NULL_3 = 11,
  NUMBER = 12,
  NUMBER_AFTER_E_DIGIT_NOTATION = 13,
  NUMBER_AFTER_E_NOTATION = 14,
  NUMBER_AFTER_HYPHEN = 15,
  NUMBER_AFTER_PERIOD = 16,
  NUMBER_AFTER_PERIOD_DIGIT = 17,
  NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION = 18,
  NUMBER_AFTER_ZERO = 19,
  OBJECT = 20,
  OBJECT_END = 21,
  OBJECT_KEY = 22,
  OBJECT_KEY_BEGIN_QUOTE = 23,
  OBJECT_SEPARATOR = 24,
  OBJECT_VALUE = 25,
  STRING = 26,
  STRING_ESCAPE = 27,
  TRUE_1 = 28,
  TRUE_2 = 29,
  TRUE_3 = 30,
  UNICODE_HEX_CHAR_FIRST = 31,
  UNICODE_HEX_CHAR_LAST = 32,
  UNICODE_HEX_CHAR_SECOND = 33,
  UNICODE_HEX_CHAR_THIRD = 34,
};

enum class CallbackCode {
  // TODO: Implement callbacks.
};


// Extracts CallbackCode from the bytes.
inline static uint8_t ToCallbackCode(uint32_t code);

// Extracts push StateCode from the bytes.
inline static uint8_t ToPushStateCode(uint32_t code);

// Extracts active State code from the bytes.
inline static uint8_t ToCurrentStateCode(uint32_t code);

// Returns code for current token and active state.
inline static uint32_t CodeForToken(unsigned char c, uint8_t state);

// Checks the push bit is on.
inline static bool HasPushBit(uint32_t code);

// Checks the push bit is off.
inline static bool HasPopBit(uint32_t code);

constexpr std::array<int, 127> kTokenIndexes {
    44, 44, 44, 44, 44, 44, 44, 44,
    44, 0, 1, 44, 44, 2, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44,
    3, 44, 4, 44, 44, 44, 44, 44,
    44, 44, 44, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 20, 44, 44, 44, 44, 44,
    44, 21, 22, 23, 24, 25, 26, 44,
    44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 27, 28, 29, 44, 44,
    44, 30, 31, 32, 33, 34, 35, 44,
    44, 44, 44, 44, 36, 44, 37, 44,
    44, 44, 38, 39, 40, 41, 44, 44,
    44, 44, 44, 42, 44, 43, 44, };

constexpr std::array<std::array<uint32_t, 46>, 35> kParseStates {{
    // $
    // Code: 0
    {0x0, 0x0, 0x0, 0x0, 0x1a00, 0xff, 0xff, 0xf00,
     0xff, 0xff, 0x1300, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00,
     0xc00, 0xc00, 0xc00, 0xc00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x200, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x500, 0xff, 0x900, 0xff, 0xff,
     0x1c00, 0xff, 0x1400, 0xff, 0xff, 0xff},
    // ARRAY_END
    // Code: 1
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x40, 0x40},
    // ARRAY_FIRST_ITEM
    // Code: 2
    {0x200, 0x200, 0x200, 0x200, 0x41a80, 0xff, 0xff, 0x40f80,
     0xff, 0xff, 0x41380, 0x40c80, 0x40c80, 0x40c80, 0x40c80, 0x40c80,
     0x40c80, 0x40c80, 0x40c80, 0x40c80, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40280, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40580, 0xff, 0x40980, 0xff, 0xff,
     0x41c80, 0xff, 0x41480, 0xff, 0xff, 0xff},
    // ARRAY_NEXT_ITEM
    // Code: 3
    {0x300, 0x300, 0x300, 0x300, 0x41a80, 0xff, 0xff, 0x40f80,
     0xff, 0xff, 0x41380, 0x40c80, 0x40c80, 0x40c80, 0x40c80, 0x40c80,
     0x40c80, 0x40c80, 0x40c80, 0x40c80, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40280, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40580, 0xff, 0x40980, 0xff, 0xff,
     0x41c80, 0xff, 0x41480, 0xff, 0xff, 0xff},
    // ARRAY_SEPARATOR
    // Code: 4
    {0x400, 0x400, 0x400, 0x400, 0xff, 0xff, 0x300, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0x100, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // FALSE_1
    // Code: 5
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x600, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // FALSE_2
    // Code: 6
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x700, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // FALSE_3
    // Code: 7
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x800,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // FALSE_4
    // Code: 8
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NULL_1
    // Code: 9
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xa00, 0xff, 0xff, 0xff, 0xff},
    // NULL_2
    // Code: 10
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xb00, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NULL_3
    // Code: 11
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NUMBER
    // Code: 12
    {0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x40, 0xff,
     0x1000, 0xff, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00,
     0xc00, 0xc00, 0xc00, 0xc00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40, 0xff, 0xff},
    // NUMBER_AFTER_E_DIGIT_NOTATION
    // Code: 13
    {0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x40, 0xff,
     0xff, 0xff, 0xd00, 0xd00, 0xd00, 0xd00, 0xd00, 0xd00,
     0xd00, 0xd00, 0xd00, 0xd00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40, 0xff, 0xff},
    // NUMBER_AFTER_E_NOTATION
    // Code: 14
    {0xff, 0xff, 0xff, 0xff, 0xff, 0x1200, 0xff, 0x1200,
     0xff, 0xff, 0xd00, 0xd00, 0xd00, 0xd00, 0xd00, 0xd00,
     0xd00, 0xd00, 0xd00, 0xd00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NUMBER_AFTER_HYPHEN
    // Code: 15
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x1300, 0xc00, 0xc00, 0xc00, 0xc00, 0xc00,
     0xc00, 0xc00, 0xc00, 0xc00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NUMBER_AFTER_PERIOD
    // Code: 16
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x1100, 0x1100, 0x1100, 0x1100, 0x1100, 0x1100,
     0x1100, 0x1100, 0x1100, 0x1100, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // NUMBER_AFTER_PERIOD_DIGIT
    // Code: 17
    {0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x40, 0xff,
     0xff, 0xff, 0x1100, 0x1100, 0x1100, 0x1100, 0x1100, 0x1100,
     0x1100, 0x1100, 0x1100, 0x1100, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xe00, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xe00, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40, 0xff, 0xff},
    // NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION
    // Code: 18
    {0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x40, 0xff,
     0xff, 0xff, 0x1200, 0x1200, 0x1200, 0x1200, 0x1200, 0x1200,
     0x1200, 0x1200, 0x1200, 0x1200, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40, 0xff, 0xff},
    // NUMBER_AFTER_ZERO
    // Code: 19
    {0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x40, 0xff,
     0x1000, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xe00, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff,
     0xff, 0xff, 0xe00, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x40, 0xff, 0xff},
    // OBJECT
    // Code: 20
    {0x1400, 0x1400, 0x1400, 0x1400, 0x161a80, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x1500, 0xff, 0xff},
    // OBJECT_END
    // Code: 21
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x40, 0x40},
    // OBJECT_KEY
    // Code: 22
    {0x1600, 0x1600, 0x1600, 0x1600, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x1900, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // OBJECT_KEY_BEGIN_QUOTE
    // Code: 23
    {0x1700, 0x1700, 0x1700, 0x1700, 0x161a80, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // OBJECT_SEPARATOR
    // Code: 24
    {0x1800, 0x1800, 0x1800, 0x1800, 0xff, 0xff, 0x1700, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x1500, 0xff, 0xff},
    // OBJECT_VALUE
    // Code: 25
    {0x1900, 0x1900, 0x1900, 0x1900, 0x181a80, 0xff, 0xff, 0x180f80,
     0xff, 0xff, 0x181380, 0x180c80, 0x180c80, 0x180c80, 0x180c80, 0x180c80,
     0x180c80, 0x180c80, 0x180c80, 0x180c80, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x180280, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x180580, 0xff, 0x180980, 0xff, 0xff,
     0x181c80, 0xff, 0x181480, 0xff, 0xff, 0xff},
    // STRING
    // Code: 26
    {0xff, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x1b00, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x1a00, 0x1a00},
    // STRING_ESCAPE
    // Code: 27
    {0xff, 0xff, 0xff, 0xff, 0x1a00, 0xff, 0xff, 0xff,
     0xff, 0x1a00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0x1a00, 0xff, 0xff, 0x1a00,
     0xff, 0xff, 0xff, 0x1a00, 0xff, 0x1a00, 0x1a00, 0xff,
     0x1a00, 0x1f00, 0xff, 0xff, 0xff, 0xff},
    // TRUE_1
    // Code: 28
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1d00, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // TRUE_2
    // Code: 29
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0x1e00, 0xff, 0xff, 0xff, 0xff},
    // TRUE_3
    // Code: 30
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // UNICODE_HEX_CHAR_FIRST
    // Code: 31
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x2100, 0x2100, 0x2100, 0x2100, 0x2100, 0x2100,
     0x2100, 0x2100, 0x2100, 0x2100, 0xff, 0x2100, 0x2100, 0x2100,
     0x2100, 0x2100, 0x2100, 0xff, 0xff, 0xff, 0x2100, 0x2100,
     0x2100, 0x2100, 0x2100, 0x2100, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // UNICODE_HEX_CHAR_LAST
    // Code: 32
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x1a00, 0x1a00, 0x1a00, 0x1a00, 0x1a00, 0x1a00,
     0x1a00, 0x1a00, 0x1a00, 0x1a00, 0xff, 0x1a00, 0x1a00, 0x1a00,
     0x1a00, 0x1a00, 0x1a00, 0xff, 0xff, 0xff, 0x1a00, 0x1a00,
     0x1a00, 0x1a00, 0x1a00, 0x1a00, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // UNICODE_HEX_CHAR_SECOND
    // Code: 33
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x2200, 0x2200, 0x2200, 0x2200, 0x2200, 0x2200,
     0x2200, 0x2200, 0x2200, 0x2200, 0xff, 0x2200, 0x2200, 0x2200,
     0x2200, 0x2200, 0x2200, 0xff, 0xff, 0xff, 0x2200, 0x2200,
     0x2200, 0x2200, 0x2200, 0x2200, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    // UNICODE_HEX_CHAR_THIRD
    // Code: 34
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000,
     0x2000, 0x2000, 0x2000, 0x2000, 0xff, 0x2000, 0x2000, 0x2000,
     0x2000, 0x2000, 0x2000, 0xff, 0xff, 0xff, 0x2000, 0x2000,
     0x2000, 0x2000, 0x2000, 0x2000, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
}};


inline static uint8_t ToCallbackCode(uint32_t code) {
  // 4th byte.
  return static_cast<uint8_t>(code >> 24);
}

inline static uint8_t ToPushStateCode(uint32_t code) {
  // 3rd byte.
  return static_cast<uint8_t>((code & 0x00ff0000) >> 16);
}

inline static uint8_t ToCurrentStateCode(uint32_t code) {
  // 2nd byte.
  return static_cast<uint8_t>((code & 0x0000ff00) >> 8);
}

inline static bool HasPushBit(uint32_t code) {
  // 6th bit in first byte.
  return ((code & 0x80) >> 7) == 1;
}

inline static bool HasPopBit(uint32_t code) {
  // 7th bit in first byte.
  return ((code & 0x40) >> 6) == 1;
}

inline static uint32_t CodeForToken(unsigned char c, uint8_t state) {
  if (c > 127) {
    return kParseStates[state][44];
  }
  int index = kTokenIndexes[c];
  if (index == -1) index = 45;
  return kParseStates[state][index];
}

}  // namespace htmlparser::json

#endif  // HTMLPARSER__JSON_STATES_H_
