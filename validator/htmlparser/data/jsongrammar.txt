#
# Copyright 2020 The AMP HTML Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the license.
#
# JSON grammer. https://www.json.org/

# Begin.
$ '{' OBJECT;
$ '[' ARRAY_FIRST_ITEM;
$ '"' STRING;
$ '-' NUMBER_AFTER_HYPHEN;
$ "1..9" NUMBER;
$ '0' NUMBER_AFTER_ZERO;
$ 't' TRUE_1;
$ 'f' FALSE_1;
$ 'n' NULL_1;
# Ignore whitespace chars.
$ "\t\n\r " $;

# true literal (case sensitive, lowercase).
TRUE_1 'r' TRUE_2;
TRUE_2 'u' TRUE_3;
TRUE_3 'e' POP;

# false literal (case sensitive, lowercase).
FALSE_1 'a' FALSE_2;
FALSE_2 'l' FALSE_3;
FALSE_3 's' FALSE_4;
FALSE_4 'e' POP;

# null literal (case sensitive, lowercase).
NULL_1 'u' NULL_2;
NULL_2 'l' NULL_3;
NULL_3 'l' POP;

# String.
# https://www.json.org/img/string.png
STRING .* STRING;
# Stop string mode at closing double quotes.
# STRING_ESCAPE ignores any escaped double quotes.
STRING '"' POP;

# Escape char followed by \. Allowed chars are:
# " - Quotation mark.
# \ - Reverse Solidus.
# / - Solidus.
# b - Backspace.
# f - Formfeed.
# n - Linefeed.
# r - Carriage return.
# t = Horizontal tab.
STRING '\' STRING_ESCAPE;
STRING_ESCAPE "\"\/bfnrt" STRING;
# Next four characters followed by \u
STRING_ESCAPE 'u' UNICODE_HEX_CHAR_FIRST;
UNICODE_HEX_CHAR_FIRST "0..9a..fA..F" UNICODE_HEX_CHAR_SECOND;
UNICODE_HEX_CHAR_SECOND "0..9a..fA..F" UNICODE_HEX_CHAR_THIRD;
UNICODE_HEX_CHAR_THIRD "0..9a..fA..F" UNICODE_HEX_CHAR_LAST;
UNICODE_HEX_CHAR_LAST "0..9a..fA..F" STRING;

# Number.
# https://www.json.org/img/number.png
# 1-9
NUMBER "0..9" NUMBER;
NUMBER '.' NUMBER_AFTER_PERIOD;
# Stop for any other character.
NUMBER ",}] \t\n\r" POP;

NUMBER_AFTER_PERIOD "0..9" NUMBER_AFTER_PERIOD_DIGIT;
NUMBER_AFTER_PERIOD_DIGIT "0..9" NUMBER_AFTER_PERIOD_DIGIT;
NUMBER_AFTER_PERIOD_DIGIT "eE" NUMBER_AFTER_E_NOTATION;
NUMBER_AFTER_PERIOD_DIGIT ",}] \t\n\r"  POP;

NUMBER_AFTER_ZERO '.' NUMBER_AFTER_PERIOD;
NUMBER_AFTER_ZERO "eE" NUMBER_AFTER_E_NOTATION;
NUMBER_AFTER_ZERO ",}] \t\n\r" POP;

NUMBER_AFTER_HYPHEN "0..9" NUMBER;
NUMBER_AFTER_HYPHEN '0' NUMBER_AFTER_ZERO;

NUMBER_AFTER_E_NOTATION "+-" NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION;
NUMBER_AFTER_E_NOTATION "0..9" NUMBER_AFTER_E_DIGIT_NOTATION;

NUMBER_AFTER_E_DIGIT_NOTATION "0..9" NUMBER_AFTER_E_DIGIT_NOTATION;
NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION "0..9" NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION;
NUMBER_AFTER_E_DIGIT_NOTATION ",}] \t\n\r"  POP;
NUMBER_AFTER_PLUS_MINUS_AFTER_E_NOTATION ",}] \t\n\r" POP;

# Arrays.
# https://www.json.org/img/array.png
ARRAY_FIRST_ITEM ']' ARRAY_END;
ARRAY_FIRST_ITEM '{' OBJECT|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM '[' ARRAY_FIRST_ITEM|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM '"' STRING|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM '-' NUMBER_AFTER_HYPHEN|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM '0' NUMBER_AFTER_ZERO|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM "1..9" NUMBER|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM 't' TRUE_1|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM 'f' FALSE_1|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM 'n' NULL_1|PUSH|ARRAY_SEPARATOR;
ARRAY_FIRST_ITEM ']' POP;
# Ignore whitespace chars between [ and first item.
ARRAY_FIRST_ITEM "\t\n\r " ARRAY_FIRST_ITEM;
ARRAY_SEPARATOR ',' ARRAY_NEXT_ITEM;
# Ignore whitespce chars between first item and comma.
ARRAY_SEPARATOR "\t\n\r " ARRAY_SEPARATOR;
ARRAY_SEPARATOR ']' ARRAY_END;
ARRAY_NEXT_ITEM '{' OBJECT|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM '[' ARRAY_FIRST_ITEM|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM '"' STRING|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM '-' NUMBER_AFTER_HYPHEN|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM '0' NUMBER_AFTER_ZERO|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM "1..9" NUMBER|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM 't' TRUE_1|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM 'f' FALSE_1|PUSH|ARRAY_SEPARATOR;
ARRAY_NEXT_ITEM 'n' NULL_1|PUSH|ARRAY_SEPARATOR;
# Ignore whitespace chars between comma and next item or ].
ARRAY_NEXT_ITEM "\t\n\r " ARRAY_NEXT_ITEM;
ARRAY_END .* POP;

# Object.
# https://www.json.org/img/object.png
OBJECT '"' STRING|PUSH|OBJECT_KEY;
OBJECT_KEY_BEGIN_QUOTE '"' STRING|PUSH|OBJECT_KEY;
OBJECT_KEY_BEGIN_QUOTE "\t\n\r " OBJECT_KEY_BEGIN_QUOTE;
# Ignore whitespace between { and first key.
OBJECT "\t\n\r " OBJECT;
OBJECT '}' OBJECT_END;
OBJECT_KEY ':' OBJECT_VALUE;
# Ignore whitespace betwen key and colon.
OBJECT_KEY "\t\n\r " OBJECT_KEY;
OBJECT_VALUE '"' STRING|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE 't' TRUE_1|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE 'f' FALSE_1|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE 'n' NULL_1|PUSH|OBJECT_SEPARATOR;
# Ignore whitespace between colon and value.
OBJECT_VALUE "\t\n\r " OBJECT_VALUE;
OBJECT_VALUE '0' NUMBER_AFTER_ZERO|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE '-' NUMBER_AFTER_HYPHEN|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE "1..9" NUMBER|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE '[' ARRAY_FIRST_ITEM|PUSH|OBJECT_SEPARATOR;
OBJECT_VALUE '{' OBJECT|PUSH|OBJECT_SEPARATOR;
OBJECT_SEPARATOR ',' OBJECT_KEY_BEGIN_QUOTE;
# Ignore whitespace chars between comma and next value.
OBJECT_SEPARATOR "\t\n\r " OBJECT_SEPARATOR;
OBJECT_SEPARATOR '}' OBJECT_END;
OBJECT_END .* POP;
