version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  node: circleci/node@4.7.0

push_and_pr_builds: &push_and_pr_builds
  filters:
    branches:
      ignore:
        - nightly

push_builds_only: &push_builds_only
  filters:
    branches:
      only:
        - main
        - /^amp-release-.*$/

experiment_job: &experiment_job
  parameters:
    exp:
      description: 'Which of the three (A/B/C) experiments to use'
      type: enum
      enum: ['A', 'B', 'C']
  environment:
    EXP: << parameters.exp >>

executors:
  base-docker-small:
    docker:
      - image: cimg/base:stable
    resource_class: small
  node-docker-medium:
    docker:
      - image: cimg/node:lts-browsers
    resource_class: medium
  node-docker-large:
    docker:
      - image: cimg/node:lts-browsers
    resource_class: large
  node-docker-xlarge:
    docker:
      - image: cimg/node:lts-browsers
    resource_class: xlarge
  jdk-docker-xlarge:
    docker:
      - image: cimg/openjdk:16.0-node
    resource_class: xlarge
  macos-medium:
    macos:
      xcode: 12.4.0
    resource_class: medium

commands:
  checkout_repo:
    steps:
      - restore_cache:
          name: 'Restore Git Cache'
          keys:
            - git-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - git-cache-{{ arch }}-{{ .Branch }}-
            - git-cache-{{ arch }}-
      - checkout
      - save_cache:
          name: 'Save Git Cache'
          key: git-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git
  setup_node_environment:
    steps:
      - node/install:
          lts: true
          install-npm: false
      - node/install-packages
  setup_vm:
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: 'Configure Temporary Workspace'
          command: |
            mv /tmp/workspace /tmp/restored-workspace
            mkdir -p /tmp/workspace
      - run:
          name: 'Maybe Gracefully Halt'
          command: /tmp/restored-workspace/maybe_gracefully_halt.sh
      - checkout_repo
      - run:
          name: 'Configure Development Environment'
          command: |
            ./.circleci/fetch_merge_commit.sh
            ./.circleci/check_config.sh
            ./.circleci/restore_build_output.sh
            cat ./build-system/test-configs/hosts | sudo tee -a /etc/hosts
      - setup_node_environment
  teardown_vm:
    steps:
      - persist_to_workspace:
          root: /tmp
          paths:
            - workspace
  install_chrome:
    steps:
      - browser-tools/install-chrome:
          replace-existing: true
      - browser-tools/install-chromedriver
  enable_safari_automation:
    steps:
      - run:
          name: 'Enable Safari Automation'
          command: |
            defaults write com.apple.Safari AllowRemoteAutomation 1
            defaults write com.apple.Safari IncludeDevelopMenu 1
            sudo safaridriver --enable
  store_test_output:
    steps:
      - store_artifacts:
          path: result-reports
      - store_test_results:
          path: result-reports
  skip_on_push_builds:
    steps:
      - when:
          condition:
            matches:
              pattern: ^main|amp-release-.*$
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: 'Skip Job on Push Builds'
                command: circleci-agent step halt

jobs:
  'Initialize Repository':
    executor:
      name: base-docker-small
    steps:
      - checkout_repo
      - run:
          name: 'Initialize Repository'
          command: ./.circleci/initialize_repo.sh
      - run:
          name: 'Initialize Workspace'
          command: cp .circleci/maybe_gracefully_halt.sh /tmp/workspace
      - teardown_vm
  'Checks':
    executor:
      name: node-docker-medium
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Checks ⭐'
          command: node build-system/pr-check/checks.js
      - teardown_vm
  'Unminified Build':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: '⭐ Unminified Build ⭐'
          command: node build-system/pr-check/unminified-build.js
      - teardown_vm
  'Nomodule Build - Test':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: 'Create Artifacts Directory'
          command: mkdir -p /tmp/artifacts
      - run:
          name: '⭐ Nomodule Build ⭐'
          command: node build-system/pr-check/nomodule-build.js
      - store_artifacts:
          path: /tmp/artifacts/amp_nomodule_build.tar.gz
      - teardown_vm
  'Module Build - Test':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: '⭐ Module Build ⭐'
          command: node build-system/pr-check/module-build.js
      - teardown_vm
  'Nomodule Build - Prod':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: '⭐ Nomodule Build ⭐'
          command: node build-system/pr-check/bundle-size-nomodule-build.js
      - teardown_vm
  'Module Build - Prod':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: '⭐ Module Build ⭐'
          command: node build-system/pr-check/bundle-size-module-build.js
      - teardown_vm
  'Bundle Size':
    executor:
      name: node-docker-medium
    steps:
      - setup_vm
      - run:
          name: '⭐ Bundle Size ⭐'
          command: node build-system/pr-check/bundle-size.js
      - teardown_vm
  'Validator Tests':
    executor:
      name: jdk-docker-xlarge
    steps:
      - setup_vm
      - run:
          name: 'Install Validator Dependencies'
          command: ./.circleci/install_validator_dependencies.sh
      - run:
          name: '⭐ Validator Tests ⭐'
          command: node build-system/pr-check/validator-tests.js
      - store_test_output
      - teardown_vm
  'Visual Diff Tests':
    executor:
      name: node-docker-large
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Visual Diff Tests ⭐'
          command: node build-system/pr-check/visual-diff-tests.js
      - store_test_output
      - teardown_vm
  'Local Unit Tests':
    executor:
      name: node-docker-large
    steps:
      - skip_on_push_builds
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Local Unit Tests ⭐'
          command: node build-system/pr-check/unit-tests-local.js
      - store_test_output
      - teardown_vm
  'All Unit Tests':
    executor:
      name: node-docker-medium
    parallelism: 6
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ All Unit Tests ⭐'
          command: node build-system/pr-check/unit-tests.js
      - store_test_output
      - teardown_vm
  'Unminified Tests':
    executor:
      name: node-docker-large
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Unminified Tests ⭐'
          command: node build-system/pr-check/unminified-tests.js
      - store_test_output
      - teardown_vm
  'Nomodule Tests':
    executor:
      name: node-docker-large
    parameters:
      config:
        description: 'Which config file to use'
        type: enum
        enum: ['prod', 'canary']
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Nomodule Tests (<< parameters.config >>) ⭐'
          command: node build-system/pr-check/nomodule-tests.js --config=<< parameters.config >>
      - store_test_output
      - teardown_vm
  'Module Tests':
    executor:
      name: node-docker-large
    parameters:
      config:
        description: 'Which config file to use'
        type: enum
        enum: ['prod', 'canary']
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Module Tests (<< parameters.config >>) ⭐'
          command: node build-system/pr-check/module-tests.js --config=<< parameters.config >>
      - store_test_output
      - teardown_vm
  'End-to-End Tests':
    executor:
      name: node-docker-medium
    parallelism: 6
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ End-to-End Tests ⭐'
          command: node build-system/pr-check/e2e-tests.js
      - store_test_output
      - teardown_vm
  'Safari Tests':
    executor:
      name: macos-medium
    steps:
      - setup_vm
      - enable_safari_automation
      - run:
          name: '⭐ Safari Tests ⭐'
          command: node build-system/pr-check/safari-tests.js
      - store_test_output
      - teardown_vm
  'Performance Tests':
    executor:
      name: node-docker-xlarge
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Performance Tests ⭐'
          command: node build-system/pr-check/performance-tests.js
      - store_test_output
      - teardown_vm
  'Experiment Build':
    executor:
      name: node-docker-xlarge
    <<: *experiment_job
    steps:
      - setup_vm
      - run:
          name: '⭐ Experiment << parameters.exp >> Build ⭐'
          command: node build-system/pr-check/experiment-build.js --experiment=experiment<< parameters.exp >>
      - teardown_vm
  'Experiment Integration Tests':
    executor:
      name: node-docker-large
    <<: *experiment_job
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Experiment << parameters.exp >> Integration Tests ⭐'
          command: node build-system/pr-check/experiment-integration-tests.js --experiment=experiment<< parameters.exp >>
      - store_test_output
      - teardown_vm
  'Experiment End-to-End Tests':
    executor:
      name: node-docker-large
    <<: *experiment_job
    parallelism: 6
    steps:
      - setup_vm
      - install_chrome
      - run:
          name: '⭐ Experiment << parameters.exp >> End-to-End Tests ⭐'
          command: node build-system/pr-check/experiment-e2e-tests.js --experiment=experiment<< parameters.exp >>
      - store_test_output
      - teardown_vm

workflows:
  'CircleCI':
    jobs:
      - 'Initialize Repository':
          <<: *push_and_pr_builds
      - 'Checks':
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Unminified Build':
          name: 'Unminified Build (Test)'
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Nomodule Build - Test':
          name: 'Nomodule Build (Test)'
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Module Build - Test':
          name: 'Module Build (Test)'
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Nomodule Build - Prod':
          name: 'Nomodule Build (Prod)'
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Module Build - Prod':
          name: 'Module Build (Prod)'
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Bundle Size':
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Prod)'
            - 'Module Build (Prod)'
      - 'Validator Tests':
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Visual Diff Tests':
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Test)'
      - 'Local Unit Tests':
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'All Unit Tests':
          name: '⛓️ All Unit Tests'
          <<: *push_and_pr_builds
          requires:
            - 'Local Unit Tests'
      - 'Unminified Tests':
          <<: *push_and_pr_builds
          requires:
            - 'Unminified Build (Test)'
      - 'Nomodule Tests':
          name: 'Nomodule Tests (<< matrix.config >>)'
          matrix:
            parameters:
              config: ['prod', 'canary']
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Test)'
      - 'Module Tests':
          name: 'Module Tests (<< matrix.config >>)'
          matrix:
            parameters:
              config: ['prod', 'canary']
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Test)'
            - 'Module Build (Test)'
      - 'End-to-End Tests':
          name: '⛓️ End-to-End Tests'
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Test)'
      - 'Safari Tests':
          name: 'Safari Tests'
          <<: *push_and_pr_builds
          requires:
            - 'Nomodule Build (Test)'
      - 'Experiment Build':
          name: 'Experiment << matrix.exp >> Build'
          matrix:
            parameters:
              exp: ['A', 'B', 'C']
          <<: *push_and_pr_builds
          requires:
            - 'Initialize Repository'
      - 'Experiment Integration Tests':
          name: 'Exp. << matrix.exp >> Integration Tests'
          matrix:
            parameters:
              exp: ['A', 'B', 'C']
          <<: *push_and_pr_builds
          requires:
            - 'Experiment << matrix.exp >> Build'
      - 'Experiment End-to-End Tests':
          name: '⛓️ Exp. << matrix.exp >> End-to-End Tests'
          matrix:
            parameters:
              exp: ['A', 'B', 'C']
          <<: *push_and_pr_builds
          requires:
            - 'Experiment << matrix.exp >> Build'
      # TODO(wg-performance, #12128): This takes 30 mins and fails regularly.
      # - 'Performance Tests':
      #     <<: *push_builds_only
      #     requires:
      #       - 'Nomodule Build (Test)'
