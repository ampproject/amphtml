import {isObject} from '#core/types';
import {tryParseJson} from '#core/types/object/json';

import {getData, listen} from '#utils/event-helper';
import {userAssert} from '#utils/log';

/** @const */
const TAG = 'amp-contentpass';

/** @const @enum {string} */
const ContentpassEvent = {
  PING: 'x-contentpass-ping',
  PONG: 'x-contentpass-pong',
  NAVIGATE: 'x-contentpass-navigate',
};

class AmpContentpass extends AMP.BaseElement {
  /** @param {!AmpElement} element */
  constructor(element) {
    super(element);

    /** @private {string} */
    this.propertyID_ = '';
  }

  /** @override */
  supportsPlatform() {
    return true;
  }

  /** @override */
  renderOutsideViewport() {
    return true;
  }

  /** @override */
  buildCallback() {
    this.propertyID_ = userAssert(
      this.element.getAttribute('data-property-id'),
      'The data-property-id attribute is required'
    );
    listen(this.win, 'message', (event) => {
      this.handleContentpassMessage_(event);
    });
  }

  /**
   * @param {!Event} event
   * @private
   */
  handleContentpassMessage_(event) {
    const iframe = this.getConsentIframe_();
    if (!this.isLegitimateEventSource_(event, iframe)) {
      return;
    }

    const eventData = getData(event);
    const data = isObject(eventData) ? eventData : tryParseJson(eventData);
    if (!data || !data['type']) {
      return; // We only process valid JSON.
    }

    switch (data['type']) {
      case ContentpassEvent.PING:
        this.handleContentpassPingMessage_(iframe);
        break;
      case ContentpassEvent.NAVIGATE:
        this.handleContentpassNavigateMessage_(data);
        break;
    }
  }

  /**
   * Retrieve the iframe generated by the amp-consent extension. The result is
   * not cached, because the iframe can be closed and recreated by the user.
   *
   * @private
   * @return {!Element} iframe
   */
  getConsentIframe_() {
    const ampConsent = this.win.document.querySelector('amp-consent');
    if (!ampConsent) {
      return undefined;
    }

    return ampConsent.querySelector('iframe');
  }

  /**
   * Check whether the event is coming from the provided iframe.
   *
   * @private
   * @param {!Event} event
   * @param {!Element} iframe
   * @return {bool}
   */
  isLegitimateEventSource_(event, iframe) {
    if (!iframe) {
      return false;
    }

    if (event.source != iframe.contentWindow) {
      return false;
    }

    return true;
  }

  /**
   * @param {!Element} iframe
   * @private
   */
  handleContentpassPingMessage_(iframe) {
    const canonical = this.win.document.querySelector('link[rel="canonical"]');
    iframe.contentWindow./*OK*/ postMessage(
      JSON.stringify(
        /** @type {JsonObject} */ ({
          type: ContentpassEvent.PONG,
          canonical: canonical ? canonical.href.toString() : undefined,
          location: this.win.location.href.toString(),
          propertyId: this.propertyID_,
        })
      ),
      '*'
    );
  }

  /**
   * @param {!Object} data
   * @private
   */
  handleContentpassNavigateMessage_(data) {
    const url = data['url'];
    if (typeof url === 'string') {
      this.win.location = url;
    }
  }
}

AMP.extension(TAG, '0.1', (AMP) => {
  AMP.registerElement(TAG, AmpContentpass);
});
