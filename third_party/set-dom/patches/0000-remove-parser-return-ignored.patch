--- original.js	2019-07-30 15:00:49.000000000 -0400
+++ set-dom.js	2019-07-30 15:00:29.000000000 -0400
@@ -3,24 +3,26 @@
 setDOM.KEY = 'data-key'
 setDOM.IGNORE = 'data-ignore'
 setDOM.CHECKSUM = 'data-checksum'
-var parseHTML = require('./parse-html')
 var KEY_PREFIX = '_set-dom-'
 var NODE_MOUNTED = KEY_PREFIX + 'mounted'
 var ELEMENT_TYPE = 1
 var DOCUMENT_TYPE = 9
 var DOCUMENT_FRAGMENT_TYPE = 11
 
-// Expose api.
-module.exports = setDOM
+// Flattened array of node pairs that were ignored (via setDOM.IGNORE) in last diff.
+var ignoredNodes = null;
 
 /**
  * @description
  * Updates existing dom to match a new dom.
  *
- * @param {Node} oldNode - The html entity to update.
- * @param {String|Node} newNode - The updated html(entity).
+ * @param {!Node} oldNode - The html entity to update.
+ * @param {string|!Node} newNode - The updated html(entity).
+ * @return {!Array<!Node>}
  */
-function setDOM (oldNode, newNode) {
+export function setDOM (oldNode, newNode) {
+  ignoredNodes = [];
+
   // Ensure a realish dom node is provided.
   assert(oldNode && oldNode.nodeType, 'You must provide a valid node to update.')
 
@@ -33,11 +35,7 @@
     setChildNodes(oldNode, newNode)
   } else {
     // Otherwise we diff the entire old node.
-    setNode(oldNode, typeof newNode === 'string'
-      // If a string was provided we will parse it as dom.
-      ? parseHTML(newNode, oldNode.nodeName)
-      : newNode
-    )
+    setNode(oldNode, newNode)
   }
 
   // Trigger mount events on initial set.
@@ -45,6 +43,10 @@
     oldNode[NODE_MOUNTED] = true
     mount(oldNode)
   }
+
+  var returnValue = ignoredNodes;
+  ignoredNodes = null;
+  return returnValue;
 }
 
 /**
@@ -226,9 +228,13 @@
  * @param {Node} b - Another node to compare.
  */
 function isEqualNode (a, b) {
+  const ignored = (isIgnored(a) && isIgnored(b));
+  if (ignored) {
+    ignoredNodes.push(a, b);
+  }
   return (
     // Check if both nodes are ignored.
-    (isIgnored(a) && isIgnored(b)) ||
+    ignored ||
     // Check if both nodes have the same checksum.
     (getCheckSum(a) === getCheckSum(b)) ||
     // Fall back to native isEqualNode check.
