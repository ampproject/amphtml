/**
 * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {computedStyle} from '../style';
import {dev, devAssert} from '../log';
import {map} from './object.js';

/** @typedef {
 *    function(!Element, !Object<string, string>, function(*): undefined):
 *      undefined
 *  }
 */
let CallbackTypeDef;

class Visitor {
  /**
   * @param {string} name
   * @param {!CallbackTypeDef} callback
   * @param {number} maxAncestorsToVisit
   */
  constructor(name, callback, maxAncestorsToVisit) {
    devAssert(
      maxAncestorsToVisit > 0,
      'maxAncestorsToVisit must be a positive value.'
    );

    /** @private @const {string} */
    this.name_ = name;

    /** @private @const {!CallbackTypeDef} */
    this.callback_ = callback;

    /** @private @const {number} */
    this.maxAncestorsToVisit_ = maxAncestorsToVisit;

    /** @private {number} */
    this.ancestorsVisited_ = 0;

    /** @private {*} */
    this.result_ = null;

    /** @private {boolean} */
    this.complete_ = false;
  }

  /**
   * @param {!Element} element
   * @param {!Object<string, string>} style
   */
  callback(element, style) {
    devAssert(
      !this.complete_,
      'Attempted to execute callback on completed visitor.'
    );
    try {
      this.result_ = this.callback_(element, style);
    } catch (e) {
      dev().warn(
          'DOM-ANCESTOR-VISITOR',
          `Visitor ${this.getName()} encountered error ` +
            `during callback execution: "${e}".`
      );
    }
    if (!--this.maxAncestorsToVisit_ || this.result_ != undefined) {
      this.complete_ = true;
    }
  }

  /** @return {string} */
  getName() {
    return this.name_;
  }

  /** @return {boolean} */
  isComplete() {
    return this.complete_;
  }

  /** Marks the visitor as complete. */
  setComplete() {
    this.complete_ = true;
  }

  /** @return {*} */
  getResult() {
    devAssert(
      this.complete_,
      'Attempted to access result for ' +
        `${this.name_} before visitor was completed.`
    );
    return this.result_;
  }
}

/**
 * Utility class that will visit every ancestor of a given element, and call
 * the provided callback functions on each element, passing in the element and
 * its computed styles as arguments to the callbacks. Callbacks may cease
 * visiting further nodes by returning a value, which may later be retrived by
 * calling 'getValueFor(visitorName)'. Once all visitors have returned or hit
 * their maximum nodes to visit, no more nodes will be visited.
 */
export class DomAncestorVisitor {
  /** @param {!Window=} win */
  constructor(win = window) {
    /**
     * List of tasks to execute during each visit.
     * @private @const {!Array<!Visitor>}
     */
    this.visitors_ = [];

    /** @private @const {!Window} */
    this.win_ = win;
  }

  /**
   * Returns a list of visitors that have not yet been marked completed.
   * @return {!Array<!Visitor>}
   * @private
   */
  getActiveVisitors_() {
    return this.visitors_.filter(visitor => !visitor.isComplete());
  }

  /**
   * @param {string} visitorName
   * @param {!CallbackTypeDef} callback
   * @param {number=} maxAncestorsToVisit The limit of how many ancestors this
   *   task should be executed on. Must be positive.
   * @return {!DomAncestorVisitor}
   */
  addVisitor(visitorName, callback, maxAncestorsToVisit = 100) {
    this.visitors_.push(new Visitor(
      visitorName,
      callback,
      maxAncestorsToVisit
    ));
    return this;
  }

  /**
   * Returns the result generated by the callback with the given name.
   * @param {string} visitorName
   * @return {*}
   */
  getResultFor(visitorName) {
    const visitor = this.visitors_.find(
        visitor => visitor.getName() == visitorName);
    devAssert(visitor, `No visitor with name ${visitorName} found.`);
    return visitor.getResult();
  }

  /**
   * Returns the result of each visitor, keyed by the visitor's name.
   * @return {!Object<string, *>}
   */
  getAllResults() {
    const results = {};
    this.visitors_.forEach(visitor => {
      results[visitor.getName()] = visitor.getResult();
    });
    return results;
  }

  /**
   * @param {?Element} element
   * @return {!DomAncestorVisitor}
   */
  visitAncestorsStartingFrom(element) {
    let el = element;
    let visitors = [];
    while (el && (visitors = this.getActiveVisitors_()).length) {
      const style = computedStyle(this.win_, el);
      visitors.forEach(visitor => visitor.callback(el, style));
      el = el.parentElement;
    }
    this.visitors_.forEach(visitor => visitor.setComplete());
    return this;
  }
}
