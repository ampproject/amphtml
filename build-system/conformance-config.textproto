requirement: {
  rule_id: 'closure:throwOfNonErrorTypes'
  type: CUSTOM
  java_class: 'com.google.javascript.jscomp.ConformanceRules$BanThrowOfNonErrorTypes'
  error_message: 'Should not throw a non-Error object.'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.padStart is not allowed'
  value: 'String.prototype.padStart'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.padEnd is not allowed'
  value: 'String.prototype.padEnd'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.startsWith is not allowed'
  value: 'String.prototype.startsWith'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.endsWith is not allowed'
  value: 'String.prototype.endsWith'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.includes is not allowed'
  value: 'String.prototype.includes'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.repeat is not allowed'
  value: 'String.prototype.repeat'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.normalize is not allowed'
  value: 'String.prototype.normalize'
}

requirement: {
  type: BANNED_PROPERTY_CALL
  error_message: 'String.prototype.codePointAt is not allowed'
  value: 'String.prototype.codePointAt'
}
