var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

/**
 * Copyright 2020 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview
 * Interactive components support a disclaimer bubble that tells users where their data is being sent to.
 * Disclaimers will retrieve the information from the lookup dictionary in disclaimer-backends-list.json.
 * In order to add a "Learn more" link or entity name ("Your response will be sent to <Organization>"),
 * submit a PR with a new entry on the DisclaimerBackendList and tag @ampproject/wg-stories to review it.
 */
import { LocalizedStringId } from "../../../src/service/localization/strings";
import { htmlFor, htmlRefs } from "../../../src/core/dom/static-template";
var DisclaimerBackendsList = JSON.parse("{\"webstoriesinteractivity-beta.web.app\":{\"learnMoreUrl\":\"https://amp.dev/stories\",\"entityName\":\"AMP Disclaimer Testing Site\"}}", function (key, val) {
  if (typeof val === 'object') Object.freeze(val);
  return val;
});
// lgtm[js/syntax-error]
import { createShadowRootWithStyle } from "../../amp-story/1.0/utils";
import { CSS } from "../../../build/amp-story-interactive-disclaimer-0.1.css";
import { addAttributesToElement } from "../../../src/core/dom";

/**
 * Creates a disclaimer icon and dialog.
 * @param {!Element} element
 * @return {!Element}
 */
function buildDisclaimerLayout(element) {
  var html = htmlFor(element);
  return html(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["<div\n    class=\"i-amphtml-story-interactive-disclaimer-dialog\"\n    role=\"alertdialog\"\n  >\n    <div\n      class=\"i-amphtml-story-interactive-disclaimer-description\"\n      ref=\"descriptionEl\"\n    >\n      <span class=\"i-amphtml-story-interactive-disclaimer-note\" ref=\"noteEl\"\n        >Your response will be sent to\n      </span>\n      <span\n        class=\"i-amphtml-story-interactive-disclaimer-entity\"\n        ref=\"entityEl\"\n      ></span>\n      <div class=\"i-amphtml-story-interactive-disclaimer-url\" ref=\"urlEl\"></div>\n    </div>\n    <a\n      target=\"_blank\"\n      class=\"i-amphtml-story-interactive-disclaimer-link\"\n      ref=\"linkEl\"\n      >Learn more</a\n    >\n    <button\n      class=\"i-amphtml-story-interactive-disclaimer-close\"\n      aria-label=\"Close disclaimer\"\n    ></button>\n  </div>"])));
}

/**
 * Creates a disclaimer dialog from the interactive element passed in.
 * @param {!AmpStoryInteractive} interactive the interactive element.
 * @param {JsonObject<string, string>=} attrs optional attributes for the disclaimer.
 * @return {!Element} the container for the shadow root that has the disclaimer.
 */
export function buildInteractiveDisclaimer(interactive, attrs) {
  if (attrs === void 0) {
    attrs = {};
  }

  var disclaimer = buildDisclaimerLayout(interactive.element);
  addAttributesToElement(disclaimer, attrs);

  // Fill information
  var _htmlRefs = htmlRefs(disclaimer),
      descriptionEl = _htmlRefs.descriptionEl,
      entityEl = _htmlRefs.entityEl,
      linkEl = _htmlRefs.linkEl,
      noteEl = _htmlRefs.noteEl,
      urlEl = _htmlRefs.urlEl;

  var backendUrl = interactive.element.getAttribute('endpoint').replace('https://', '');
  var backendSpecs = getBackendSpecs(backendUrl, DisclaimerBackendsList);

  if (backendSpecs) {
    entityEl.textContent = backendSpecs[1].entityName;
    urlEl.textContent = backendSpecs[0];
    backendSpecs[1].learnMoreUrl ? linkEl.href = backendSpecs[1].learnMoreUrl : linkEl.remove();
  } else {
    entityEl.remove();
    urlEl.textContent = backendUrl;
    linkEl.remove();
  }

  noteEl.textContent = interactive.localizationService.getLocalizedString(LocalizedStringId.AMP_STORY_INTERACTIVE_DISCLAIMER_NOTE);
  // Set the described-by for a11y.
  var disclaimerDescriptionId = "i-amphtml-story-disclaimer-" + interactive.element.id + "-description";
  descriptionEl.id = disclaimerDescriptionId;
  disclaimer.setAttribute('aria-describedby', disclaimerDescriptionId);
  // Create container and return.
  var disclaimerContainer = htmlFor(interactive.element)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["<div class=\"i-amphtml-story-interactive-disclaimer-dialog-container\"></div>"])));
  createShadowRootWithStyle(disclaimerContainer, disclaimer, CSS);
  return disclaimerContainer;
}

/**
 * Creates a disclaimer icon from the interactive element passed in.
 * @param {!AmpStoryInteractive} interactive the interactive element.
 * @return {!Element} the icon with the dialog that should be added to the shadowRoot.
 */
export function buildInteractiveDisclaimerIcon(interactive) {
  var html = htmlFor(interactive.element);
  return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["<button\n    class=\"i-amphtml-story-interactive-disclaimer-icon\"\n    aria-label=\"Open disclaimer\"\n  ></button>"])));
}

/**
 * Returns the corresponding backend specs (as an array of url and specs), or undefined.
 * @param {string} backendUrl
 * @param {!Object<string, !Object<string, string>>} backendsList
 * @return {?Array<string|Object<string, string>>} array that contains: base url of backend, {learnMoreUrl, entity}.
 */
export function getBackendSpecs(backendUrl, backendsList) {
  return Object.entries(backendsList).find(function (element) {
    return element[0] === backendUrl.substring(0, element[0].length);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
// /Users/mszylkowski/src/amphtml/extensions/amp-story-interactive/0.1/interactive-disclaimer.js