/**
 * Copyright 2020 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { devAssert } from "../../assert";
import { isIframed } from "./..";
import * as mode from "../../mode";
import { toWin } from "../../window";

/**
 * Returns an IntersectionObserver tracking the Viewport.
 *
 * @param {function(!Array<!IntersectionObserverEntry>)} ioCallback
 * @param {!Window} win
 * @param {{
 *   threshold: (number|!Array<number>|undefined),
 *   needsRootBounds: (boolean|undefined),
 * }=} opts
 * @return {!IntersectionObserver}
 */
export function createViewportObserver(ioCallback, win, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var _opts = opts,
      needsRootBounds = _opts.needsRootBounds,
      threshold = _opts.threshold;
  // The Document -> Element type conversion is necessary to satisfy the
  // `IntersectionObserver` constructor extern that only accepts `Element`.
  var root = isIframed(win) && needsRootBounds ?
  /** @type {?} */
  win.document : undefined;
  return new win.IntersectionObserver(ioCallback, {
    threshold: threshold,
    root: root
  });
}

/** @type {!WeakMap<!Window, !IntersectionObserver>} */
var viewportObservers = new WeakMap();

/** @type {!WeakMap<!Element, function(boolean)>} */
var viewportCallbacks = new WeakMap();

/**
 * Lazily creates an IntersectionObserver per Window to track when elements
 * enter and exit the viewport. Fires viewportCallback when this happens.
 *
 * @param {!Element} element
 * @param {function(boolean)} viewportCallback
 */
export function observeWithSharedInOb(element, viewportCallback) {
  // There should never be two unique observers of the same element.
  if (mode.isLocalDev()) {
    devAssert(!viewportCallbacks.has(element) || viewportCallbacks.get(element) === viewportCallback);
  }

  var win = toWin(element.ownerDocument.defaultView);
  var viewportObserver = viewportObservers.get(win);

  if (!viewportObserver) {
    viewportObservers.set(win, viewportObserver = createViewportObserver(ioCallback, win));
  }

  viewportCallbacks.set(element, viewportCallback);
  viewportObserver.observe(element);
}

/**
 * Unobserve an element.
 * @param {!Element} element
 */
export function unobserveWithSharedInOb(element) {
  var win = toWin(element.ownerDocument.defaultView);
  var viewportObserver = viewportObservers.get(win);
  viewportObserver == null ? void 0 : viewportObserver.unobserve(element);
  viewportCallbacks.delete(element);
}

/**
 * Call the registered callbacks for each element that has crossed the
 * viewport boundary.
 *
 * @param {!Array<!IntersectionObserverEntry>} entries
 */
function ioCallback(entries) {
  for (var i = 0; i < entries.length; i++) {
    var _viewportCallbacks$ge;

    var _entries$i = entries[i],
        isIntersecting = _entries$i.isIntersecting,
        target = _entries$i.target;
    (_viewportCallbacks$ge = viewportCallbacks.get(target)) == null ? void 0 : _viewportCallbacks$ge(isIntersecting);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdwb3J0LW9ic2VydmVyLmpzIl0sIm5hbWVzIjpbImRldkFzc2VydCIsImlzSWZyYW1lZCIsIm1vZGUiLCJ0b1dpbiIsImNyZWF0ZVZpZXdwb3J0T2JzZXJ2ZXIiLCJpb0NhbGxiYWNrIiwid2luIiwib3B0cyIsIm5lZWRzUm9vdEJvdW5kcyIsInRocmVzaG9sZCIsInJvb3QiLCJkb2N1bWVudCIsInVuZGVmaW5lZCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwidmlld3BvcnRPYnNlcnZlcnMiLCJXZWFrTWFwIiwidmlld3BvcnRDYWxsYmFja3MiLCJvYnNlcnZlV2l0aFNoYXJlZEluT2IiLCJlbGVtZW50Iiwidmlld3BvcnRDYWxsYmFjayIsImlzTG9jYWxEZXYiLCJoYXMiLCJnZXQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ2aWV3cG9ydE9ic2VydmVyIiwic2V0Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZVdpdGhTaGFyZWRJbk9iIiwidW5vYnNlcnZlIiwiZGVsZXRlIiwiZW50cmllcyIsImkiLCJsZW5ndGgiLCJpc0ludGVyc2VjdGluZyIsInRhcmdldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUUEsU0FBUjtBQUNBLFNBQVFDLFNBQVI7QUFDQSxPQUFPLEtBQUtDLElBQVo7QUFDQSxTQUFRQyxLQUFSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNDLHNCQUFULENBQWdDQyxVQUFoQyxFQUE0Q0MsR0FBNUMsRUFBaURDLElBQWpELEVBQTREO0FBQUEsTUFBWEEsSUFBVztBQUFYQSxJQUFBQSxJQUFXLEdBQUosRUFBSTtBQUFBOztBQUNqRSxjQUFxQ0EsSUFBckM7QUFBQSxNQUFPQyxlQUFQLFNBQU9BLGVBQVA7QUFBQSxNQUF3QkMsU0FBeEIsU0FBd0JBLFNBQXhCO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLElBQUksR0FDUlQsU0FBUyxDQUFDSyxHQUFELENBQVQsSUFBa0JFLGVBQWxCO0FBQ0k7QUFBa0JGLEVBQUFBLEdBQUcsQ0FBQ0ssUUFEMUIsR0FFSUMsU0FITjtBQUlBLFNBQU8sSUFBSU4sR0FBRyxDQUFDTyxvQkFBUixDQUE2QlIsVUFBN0IsRUFBeUM7QUFDOUNJLElBQUFBLFNBQVMsRUFBVEEsU0FEOEM7QUFFOUNDLElBQUFBLElBQUksRUFBSkE7QUFGOEMsR0FBekMsQ0FBUDtBQUlEOztBQUVEO0FBQ0EsSUFBTUksaUJBQWlCLEdBQUcsSUFBSUMsT0FBSixFQUExQjs7QUFFQTtBQUNBLElBQU1DLGlCQUFpQixHQUFHLElBQUlELE9BQUosRUFBMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNFLHFCQUFULENBQStCQyxPQUEvQixFQUF3Q0MsZ0JBQXhDLEVBQTBEO0FBQy9EO0FBQ0EsTUFBSWpCLElBQUksQ0FBQ2tCLFVBQUwsRUFBSixFQUF1QjtBQUNyQnBCLElBQUFBLFNBQVMsQ0FDUCxDQUFDZ0IsaUJBQWlCLENBQUNLLEdBQWxCLENBQXNCSCxPQUF0QixDQUFELElBQ0VGLGlCQUFpQixDQUFDTSxHQUFsQixDQUFzQkosT0FBdEIsTUFBbUNDLGdCQUY5QixDQUFUO0FBSUQ7O0FBRUQsTUFBTWIsR0FBRyxHQUFHSCxLQUFLLENBQUNlLE9BQU8sQ0FBQ0ssYUFBUixDQUFzQkMsV0FBdkIsQ0FBakI7QUFDQSxNQUFJQyxnQkFBZ0IsR0FBR1gsaUJBQWlCLENBQUNRLEdBQWxCLENBQXNCaEIsR0FBdEIsQ0FBdkI7O0FBQ0EsTUFBSSxDQUFDbUIsZ0JBQUwsRUFBdUI7QUFDckJYLElBQUFBLGlCQUFpQixDQUFDWSxHQUFsQixDQUNFcEIsR0FERixFQUVHbUIsZ0JBQWdCLEdBQUdyQixzQkFBc0IsQ0FBQ0MsVUFBRCxFQUFhQyxHQUFiLENBRjVDO0FBSUQ7O0FBQ0RVLEVBQUFBLGlCQUFpQixDQUFDVSxHQUFsQixDQUFzQlIsT0FBdEIsRUFBK0JDLGdCQUEvQjtBQUNBTSxFQUFBQSxnQkFBZ0IsQ0FBQ0UsT0FBakIsQ0FBeUJULE9BQXpCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNVLHVCQUFULENBQWlDVixPQUFqQyxFQUEwQztBQUMvQyxNQUFNWixHQUFHLEdBQUdILEtBQUssQ0FBQ2UsT0FBTyxDQUFDSyxhQUFSLENBQXNCQyxXQUF2QixDQUFqQjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHWCxpQkFBaUIsQ0FBQ1EsR0FBbEIsQ0FBc0JoQixHQUF0QixDQUF6QjtBQUNBbUIsRUFBQUEsZ0JBQWdCLFFBQWhCLFlBQUFBLGdCQUFnQixDQUFFSSxTQUFsQixDQUE0QlgsT0FBNUI7QUFDQUYsRUFBQUEsaUJBQWlCLENBQUNjLE1BQWxCLENBQXlCWixPQUF6QjtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNiLFVBQVQsQ0FBb0IwQixPQUFwQixFQUE2QjtBQUMzQixPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE9BQU8sQ0FBQ0UsTUFBNUIsRUFBb0NELENBQUMsRUFBckMsRUFBeUM7QUFBQTs7QUFDdkMscUJBQWlDRCxPQUFPLENBQUNDLENBQUQsQ0FBeEM7QUFBQSxRQUFPRSxjQUFQLGNBQU9BLGNBQVA7QUFBQSxRQUF1QkMsTUFBdkIsY0FBdUJBLE1BQXZCO0FBQ0EsNkJBQUFuQixpQkFBaUIsQ0FBQ00sR0FBbEIsQ0FBc0JhLE1BQXRCLDRDQUFnQ0QsY0FBaEM7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge2RldkFzc2VydH0gZnJvbSAnI2NvcmUvYXNzZXJ0JztcbmltcG9ydCB7aXNJZnJhbWVkfSBmcm9tICcjY29yZS9kb20nO1xuaW1wb3J0ICogYXMgbW9kZSBmcm9tICcjY29yZS9tb2RlJztcbmltcG9ydCB7dG9XaW59IGZyb20gJyNjb3JlL3dpbmRvdyc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBJbnRlcnNlY3Rpb25PYnNlcnZlciB0cmFja2luZyB0aGUgVmlld3BvcnQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbighQXJyYXk8IUludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KX0gaW9DYWxsYmFja1xuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7e1xuICogICB0aHJlc2hvbGQ6IChudW1iZXJ8IUFycmF5PG51bWJlcj58dW5kZWZpbmVkKSxcbiAqICAgbmVlZHNSb290Qm91bmRzOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogfT19IG9wdHNcbiAqIEByZXR1cm4geyFJbnRlcnNlY3Rpb25PYnNlcnZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZpZXdwb3J0T2JzZXJ2ZXIoaW9DYWxsYmFjaywgd2luLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge25lZWRzUm9vdEJvdW5kcywgdGhyZXNob2xkfSA9IG9wdHM7XG4gIC8vIFRoZSBEb2N1bWVudCAtPiBFbGVtZW50IHR5cGUgY29udmVyc2lvbiBpcyBuZWNlc3NhcnkgdG8gc2F0aXNmeSB0aGVcbiAgLy8gYEludGVyc2VjdGlvbk9ic2VydmVyYCBjb25zdHJ1Y3RvciBleHRlcm4gdGhhdCBvbmx5IGFjY2VwdHMgYEVsZW1lbnRgLlxuICBjb25zdCByb290ID1cbiAgICBpc0lmcmFtZWQod2luKSAmJiBuZWVkc1Jvb3RCb3VuZHNcbiAgICAgID8gLyoqIEB0eXBlIHs/fSAqLyAod2luLmRvY3VtZW50KVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBuZXcgd2luLkludGVyc2VjdGlvbk9ic2VydmVyKGlvQ2FsbGJhY2ssIHtcbiAgICB0aHJlc2hvbGQsXG4gICAgcm9vdCxcbiAgfSk7XG59XG5cbi8qKiBAdHlwZSB7IVdlYWtNYXA8IVdpbmRvdywgIUludGVyc2VjdGlvbk9ic2VydmVyPn0gKi9cbmNvbnN0IHZpZXdwb3J0T2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqIEB0eXBlIHshV2Vha01hcDwhRWxlbWVudCwgZnVuY3Rpb24oYm9vbGVhbik+fSAqL1xuY29uc3Qgdmlld3BvcnRDYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIExhemlseSBjcmVhdGVzIGFuIEludGVyc2VjdGlvbk9ic2VydmVyIHBlciBXaW5kb3cgdG8gdHJhY2sgd2hlbiBlbGVtZW50c1xuICogZW50ZXIgYW5kIGV4aXQgdGhlIHZpZXdwb3J0LiBGaXJlcyB2aWV3cG9ydENhbGxiYWNrIHdoZW4gdGhpcyBoYXBwZW5zLlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYm9vbGVhbil9IHZpZXdwb3J0Q2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVXaXRoU2hhcmVkSW5PYihlbGVtZW50LCB2aWV3cG9ydENhbGxiYWNrKSB7XG4gIC8vIFRoZXJlIHNob3VsZCBuZXZlciBiZSB0d28gdW5pcXVlIG9ic2VydmVycyBvZiB0aGUgc2FtZSBlbGVtZW50LlxuICBpZiAobW9kZS5pc0xvY2FsRGV2KCkpIHtcbiAgICBkZXZBc3NlcnQoXG4gICAgICAhdmlld3BvcnRDYWxsYmFja3MuaGFzKGVsZW1lbnQpIHx8XG4gICAgICAgIHZpZXdwb3J0Q2FsbGJhY2tzLmdldChlbGVtZW50KSA9PT0gdmlld3BvcnRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBjb25zdCB3aW4gPSB0b1dpbihlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xuICBsZXQgdmlld3BvcnRPYnNlcnZlciA9IHZpZXdwb3J0T2JzZXJ2ZXJzLmdldCh3aW4pO1xuICBpZiAoIXZpZXdwb3J0T2JzZXJ2ZXIpIHtcbiAgICB2aWV3cG9ydE9ic2VydmVycy5zZXQoXG4gICAgICB3aW4sXG4gICAgICAodmlld3BvcnRPYnNlcnZlciA9IGNyZWF0ZVZpZXdwb3J0T2JzZXJ2ZXIoaW9DYWxsYmFjaywgd2luKSlcbiAgICApO1xuICB9XG4gIHZpZXdwb3J0Q2FsbGJhY2tzLnNldChlbGVtZW50LCB2aWV3cG9ydENhbGxiYWNrKTtcbiAgdmlld3BvcnRPYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIFVub2JzZXJ2ZSBhbiBlbGVtZW50LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5vYnNlcnZlV2l0aFNoYXJlZEluT2IoZWxlbWVudCkge1xuICBjb25zdCB3aW4gPSB0b1dpbihlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xuICBjb25zdCB2aWV3cG9ydE9ic2VydmVyID0gdmlld3BvcnRPYnNlcnZlcnMuZ2V0KHdpbik7XG4gIHZpZXdwb3J0T2JzZXJ2ZXI/LnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgdmlld3BvcnRDYWxsYmFja3MuZGVsZXRlKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIENhbGwgdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIGZvciBlYWNoIGVsZW1lbnQgdGhhdCBoYXMgY3Jvc3NlZCB0aGVcbiAqIHZpZXdwb3J0IGJvdW5kYXJ5LlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PCFJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5Pn0gZW50cmllc1xuICovXG5mdW5jdGlvbiBpb0NhbGxiYWNrKGVudHJpZXMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qge2lzSW50ZXJzZWN0aW5nLCB0YXJnZXR9ID0gZW50cmllc1tpXTtcbiAgICB2aWV3cG9ydENhbGxiYWNrcy5nZXQodGFyZ2V0KT8uKGlzSW50ZXJzZWN0aW5nKTtcbiAgfVxufVxuIl19
// /Users/mszylkowski/src/amphtml/src/core/dom/layout/viewport-observer.js