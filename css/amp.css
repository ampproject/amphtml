/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Margin:0 is currently needed for iOS viewer embeds.
 * See:
 * https://github.com/ampproject/amphtml/blob/master/spec/amp-html-layout.md
 * and {@link ViewportBindingNaturalIosEmbed_} for more info.
 */
body {
  /* Undoes mandatory opacity: 0 in doc. */
  margin: 0 !important;
}

/** These properties can be overriden by user stylesheets. */
body {
  /* Text adjust is set to 100% to avoid iOS Safari bugs where the font-size is
     sometimes not restored during orientation. See #449. */
  text-size-adjust: 100%;
}

.-amp-element {
  display: inline-block;
}

.-amp-layout-nodisplay {
  /* Display is set/reset in JS */
}

.-amp-layout-fixed {
  display: inline-block;
  position: relative;
}

.-amp-layout-responsive {
  display: block;
  position: relative;
}

.-amp-layout-fixed-height {
  display: block;
  position: relative;
}

.-amp-layout-container {
  display: block;
  position: relative;
}

.-amp-layout-fill {
  display: block;
  overflow: hidden !important;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.-amp-layout-size-defined {
  overflow: hidden !important;
}

i-amp-sizer {
  display: block !important;
}

.-amp-fill-content {
  display: block;
  width: 100%;
  height: 100%;
  margin: auto;
}

.-amp-layout-size-defined .-amp-fill-content {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.-amp-replaced-content {
  padding: 0 !important;
  border: none !important;
  /* TODO(dvoytenko): explore adding here object-fit. */
}

/* For author styling. */
.amp-unresolved {
}

.-amp-unresolved {
  position: relative !important;
  overflow: hidden !important;
}

/* "notbuild" classes are set as soon as an element is created and removed
   as soon as the element is built. */

.amp-notbuilt {
  /* For author styling. */
}

.-amp-notbuilt {
  position: relative !important;
  overflow: hidden !important;
  color: transparent !important;
}

.-amp-notbuilt > * {
  display: none;
}

.-amp-ghost {
  visibility: hidden !important;
}

.-amp-layout {
  /* Just state. */
}

.-amp-error {
  /* Just state. */
}

.-amp-element > [placeholder] {
  display: block;
}

.-amp-element > [placeholder].hidden,
.-amp-element > [placeholder].amp-hidden {
  visibility: hidden;
}

.-amp-element:not(.amp-notsupported) > [fallback] {
  display: none;
}

.-amp-layout-size-defined > [placeholder],
.-amp-layout-size-defined > [fallback] {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
  z-index: 1 !important;
}

.-amp-notbuilt > [placeholder] {
  display: block !important;
}

.-amp-hidden-by-media-query {
  display: none;
}

.-amp-element-error {
  background: red !important;
  color: white !important;
  position: relative !important;
}

.-amp-element-error::before {
  content: attr(error-message);
}

/**
 * Wraps an element to make the contents scrollable. This is
 * used to wrap iframes which in iOS always behave as if they had the
 * seamless attribute.
 */
i-amp-scroll-container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow: auto;
}

.-amp-loading-container {
  display: block !important;
  z-index: 1;
}

.-amp-notbuilt > .-amp-loading-container {
  display: block !important;
}

/**
 * `-amp-loading-container`, `-amp-loader` and `-amp-loader-dot` all support
 * a "loading indicator" usecase. `-amp-loading-container` is mostly responsible
 * for alighning the loading indicator, while `-amp-loader` and
 * `-amp-loader-dot` are an implementation for a default loading indicator. The
 * default implementation includes the three-dot layout and animation.
 */
.-amp-loading-container.amp-hidden {
  visibility: hidden;
}

.-amp-loader {
  position: absolute;
  display: block;
  height: 10px;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  transform-origin: 50% 50%;
  white-space: nowrap;
}

.-amp-loader.amp-active .-amp-loader-dot {
  animation: -amp-loader-dots 2s infinite;
}

.-amp-loader-dot {
  position: relative;
  display: inline-block;

  height: 10px;
  width: 10px;
  margin: 2px;
  border-radius: 100%;
  background-color: rgba(0, 0, 0, .3);

  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, .2);
  will-change: transform;
}

.-amp-loader .-amp-loader-dot:nth-child(1) {
  animation-delay: 0s;
}

.-amp-loader .-amp-loader-dot:nth-child(2) {
  animation-delay: .1s;
}

.-amp-loader .-amp-loader-dot:nth-child(3) {
  animation-delay: .2s;
}

@keyframes -amp-loader-dots {
  0%, 100% {
    transform: scale(.7);
    background-color: rgba(0, 0, 0, .3);
  }

  50% {
    transform: scale(.8);
    background-color: rgba(0, 0, 0, .5);
  }
}


/**
 * `-amp-overflow` is a support for "overflow" element. This is
 * an element shown when more content is available. Typically tapping on this
 * element shows the full content.
 */
.-amp-overflow {
  z-index: 1;
}

.-amp-overflow.amp-hidden {
  visibility: hidden;
}


/* Polyfill for IE and any other browser that don't understand templates . */
template {
  display: none !important;
}


amp-pixel {
  position: absolute !important;
  top: 0 !important;
  width: 1px !important;
  height: 1px !important; /* Only things with height are ever loaded. */
  overflow: hidden !important;
  visibility: hidden;
}

/**
 * Force the layout box of the ad iframe to be exactly as big as the actual
 * iframe. The `amp-ad` tag itself can be freely styled.
 */
amp-ad iframe {
  border: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
}

/**
 * Instagram wraps the standard image into a fixed size container.
 * With these offsets, users can simply specify the the size of the
 * instagram images and things have the right size.
 * In particular the effect of adding padding to this container is
 * that with responsive layouts the responsiveness is based on the
 * asset while the padding stays constant.
 * This information is here instead of living with the CSS of the
 * component, so that the runtime can reserve the correct space
 * before the instagram implementation loads.
 */
amp-instagram {
  padding: 48px 8px !important;
}
